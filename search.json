[{"title":"macOS搭建网页版clashX","date":"2022-11-05T02:37:23.000Z","url":"/2022/11/05/macOS%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5%E7%89%88clashX/","tags":[["GFW","/tags/GFW/"],["macOS","/tags/macOS/"],["clash","/tags/clash/"]],"categories":[[" ",""]],"content":"前言clash可以说是机场的绝配了，延迟低的节点刷TG，速度快的节点看视频，解锁流媒体的节点看流媒体，分流有序，测的延迟也让人赏心悦目。只是clash的GUI内存占用太大了，很容易卡死。我便搜索有没有网页版的clash，结果发现clash内核的大佬做了个web ui，而且现在正被clashX使用！那我为什么不用web ui呢？ 注: 项目地址：  网页体验： 折腾有三种获得网页的方式：1.使用wget -m 2.拉取编译好的网页（推荐） 3.自行编译（不做教学） 下载网页1.wget 2.拉取编译好的网页 启用macOS自带的apache2参考:  然后访问  验证是否已启用 部署网页把文件夹clash-dashboard内的内容移动到/Library/WebServer/Documents 之后，直接访问localhost就能使用了！ 添加SSL证书由于我的localhost部署了太多服务，每次在浏览器输入localhost时都会联想出别的端口，为了方便，我把某个可怜的网页的host改为了127.0.0.1，为了正式一点，再给它发个证书吧！ 自签证书不做教学 为apache2安装证书参考:   将证书和私钥放在/etc/apache2并重命名为server.crt和server.key 修改’&#x2F;etc&#x2F;apache2&#x2F;httpd.conf’，注意要有root权限 找到 #LoadModule ssl_module modules&#x2F;mod_ssl.so和#Include conf&#x2F;extra&#x2F;httpd-ssl.conf，去掉前面的#号注释 并在最后加上以下内容: 把证书添加到信任列表中，然后尝试吧！ 使用下载clash内核，并在同目录下载一个.mmdb文件(推荐  ) 然后就能到网页版操作了。 但是开着命令行不好看，可以使用tmux让内核在后台运行。 缺点1.容易忘记关内核。 2.更新订阅不容易、容易忘 3.更新ip数据库不及时。"},{"title":"节点提升伪装性思路","date":"2022-11-02T13:35:49.000Z","url":"/2022/11/02/%E8%8A%82%E7%82%B9%E6%8F%90%E5%8D%87%E4%BC%AA%E8%A3%85%E6%80%A7%E6%80%9D%E8%B7%AF/","tags":[["GFW","/tags/GFW/"],["伪装","/tags/%E4%BC%AA%E8%A3%85/"]],"categories":[[" ",""]],"content":"解决DNS嫌疑某些时候，由于错误的配置，大量的DNS请求会通过代理发送。在GFW的视角看起来就很可疑了，所以如果是常用web服务器前置的话，可以通过以下措施减轻嫌疑： 反代DOH以nginx为例: 这样在自己的服务器上建立了一个DOH服务。 但是，谁知道你有个DOH服务？ 如果是自建网页的话，可以在网页里写上欢迎使用本站DOH之类的话， 如果是反代网站，可以在朋友间小范围传播这个DOH。这样还能增加访问量，减少可疑性。"},{"title":"小naive:trojan-go后置 + 客户端隐藏指纹，消除TLS指纹问题 + 缓解tls in tls特征！我愿称之为naiveproxy的另一种实现！","date":"2022-11-02T13:21:31.000Z","url":"/2022/11/02/%E5%B0%8Fnaive-trojan-go%E5%90%8E%E7%BD%AE-%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%9A%90%E8%97%8F%E6%8C%87%E7%BA%B9%EF%BC%8C%E6%B6%88%E9%99%A4TLS%E6%8C%87%E7%BA%B9%E9%97%AE%E9%A2%98-%E7%BC%93%E8%A7%A3tls-in-tls%E7%89%B9%E5%BE%81%EF%BC%81%E6%88%91%E6%84%BF%E7%A7%B0%E4%B9%8B%E4%B8%BAnaiveproxy%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%AE%9E%E7%8E%B0%EF%BC%81/","tags":[["GFW","/tags/GFW/"],["nginx","/tags/nginx/"],["trojan","/tags/trojan/"],["naiveproxy","/tags/naiveproxy/"]],"categories":[["搭建","/categories/%E6%90%AD%E5%BB%BA/"]],"content":"前言虽然naiveproxy能消除指纹问题，但真的太慢了。有没有既要当__又要__的方法呢？那就使用GFW report修改后的trojan-go来实现吧！ 搭建准备一键安装必要环境 配置nginx&#x2F;etc&#x2F;nginx&#x2F;nginx.conf 接着重启nginx 配置trojan-go先创建一个文件夹，再下载trojan-go(自行替换为对应版本): 创建一个配置文件 填入: 启动: 客户端连接请使用带有指纹混淆的GFW report版配置文件: 终端输入 即可运行 拓展缓解tls in tls将多路复用数尽可能设置大，如需无限复用，请在两端将concurrency设为&#39;-1&#39; FAQ1.为什么不在nginx里配合v2ray使用？ 答：v2ray没有指纹伪造，失去了本教程的目的。 2.为什么过不了CDN 答：目前据我观察推测是trojan-go的ws实现有问题，无法解决。 3.为什么还是被墙了 答：首先本组合没有消除TLS in TLS特征，其次可能是你的流量过大，或是用了被重点监控的ip 鸣谢GFW report提供的trojan-gov2fly教程中的TLS分流"},{"title":"论翻墙界的黑历史","date":"2022-10-29T13:18:40.000Z","url":"/2022/10/29/%E8%AE%BA%E7%BF%BB%E5%A2%99%E7%95%8C%E7%9A%84%E9%BB%91%E5%8E%86%E5%8F%B2/","tags":[["科学上网","/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"],["黑历史","/tags/%E9%BB%91%E5%8E%86%E5%8F%B2/"]],"categories":[[" ",""]],"content":"前言翻墙界看似是个自由软件遍地的良好生态，可实际上大部分开发者都一言难尽本文来盘点一些翻墙界的黑历史。 history hysteria!shadowsocksRbreakwa11魔改了shadowsocksR，但并没有遵守GPL。 网民们动用了墙外最有效的武器：开盒，开到退网。 科学界多了一个优良传统：一言不合就开盒。 *Ray之争RPRX发明的xtls协议因沟通问题与v2ray分家，自立xray。同时RPRX的语气偏于自大，导致很多人不喜欢。 分就分，但支持哪一派的人都有不理智的粉丝，双方互喷，战火也蔓延到GUI客户端，最后导致Qv2ray停更，对其他GUI也有一定影响。 现在选择哪边成了政治站队，无关实际，跟饭圈一样。 争斗还没结束，v2fly文档中提出要废除vless并用trojan替代。现在绝大多数trojan都是暴露在前端的，如何面对服务端指纹问题？xtls许可证不同踢掉就算了，那RPRX做的vless也要政治式得否决掉，强。 脚本作者也好不到哪里去优良模范：teddysun、233boy和hijk 遵守开源许可，态度温和，脚本全能。 新时代作者：Misaka No &amp; 甬哥侃侃侃 抄袭代码、简单修改，为了自身利益撕逼、饭圈化。 感叹做的人为了利益乱搞滥改，用的人一脸茫然或被卷入争斗，牛的人不想开源自己使用，GFW坐收渔翁之利。"},{"title":"回忆Misaka No(钟致远)","date":"2022-10-29T00:41:38.000Z","url":"/2022/10/29/%E5%9B%9E%E5%BF%86Misaka-No-%E9%92%9F%E8%87%B4%E8%BF%9C/","tags":[["misaka","/tags/misaka/"],["回忆","/tags/%E5%9B%9E%E5%BF%86/"]],"categories":[[" ",""]],"content":"前言最近Misaka No 被开盒而退网，想起来还是挺唏嘘的。本文以“我”的视角回忆一下他，带有强烈的主观色彩，不喜勿看。 记忆初识当时我还不会自己搭建扶墙节点，想学但苦于没有vps。在搜寻资源的时候发现了善于白嫖的他。并且按照他第一代博客(  ) 的教程，搞到了hax的vps。之后我用了他的x-ui、warp、xray脚本等工具，觉得他是个无所不能的大佬，立即拜倒。 小有改变后来仔细看了他的github项目，发现这些东西都是改编自别人，我觉得有点失望，于是又找到各项目的原作，用回原作了。 再度崇拜后来看他发了很多白嫖教程，我也跟着他白嫖了很多资源。白嫖的感觉非同一般的爽。又发现上游网络跳跃跑路了，觉得他尽到了开源使用者的义务——继续维护停更了的项目。xray支持shadowsocks-2022后，他也在x-ui里及时增加。 又觉得不对劲后来发现这些白嫖的资源质量都很低，ip也因嫖的人过多而很脏。而且自己几百年都不一定用一次。我开始怀疑：嫖来这堆垃圾，自己没用，还占用了别人需要的资源，真的好吗？ 又找到了FranzKafkaYu维护的x-ui，发现misaka版的x-ui引以为傲的功能包括ss-2022都是FranzKafkaYu完成的。这时misaka在我眼里成了一个fork别人项目、把配置改成自己喜欢的、再做成全家桶的360式流氓。 惋惜过了一段时间，发现misaka关网站了，TG群也禁言。看里面提到“怕影响自身前途”，我还以为他是喝茶去了。不禁感到惋惜：虽然都是抄的，但给了小白很多指引。 找到小号一段时间后，我发现了一个疑似他小号的账户（后来也证实确实是他）—— taffychan。我发现他新做了naiveproxy的脚本，虽然不太完善，但可以用。这总是他原创的了吧。看到他没死，还做了新作品，我觉得他会积极发展了。 重出江湖又过了一段时间，Misaka终于憋不住，重新开启了博客(  )。这时我觉得他有点恶心了:又不恢复之前所有的文章，就出几篇几个意思？炒冷饭吗？ 再看他Gitlab上的x-ui:闭源了？赤裸裸地违反开源许可！原作可是高贵的GNU-3.0许可证，你就因为代码被抄袭了就闭源？而且看到他每个脚本的界面上都大大地写着是他做的，原本网络跳跃的脚本里，原作竟然改成了他Misaka No？我立刻觉得他太不要脸了。 装高冷他在修改他的naiveproxy脚本时，我拿过去完善了一下，但还是有点问题（他新改的连运行都不行），我去找他发问，他会都不回。有疑问在他群里问，他也不理我。几天后他完善了新的naive脚本，我就怀疑他抄了我修改的部分，当然也只是怀疑。但他既然成功完善了脚本，应该能回答我的问题，但他就是没回答，不像贴心的@armeabi-v7a尽力解答issue。这行为让我很气。 被开盒最后由于和coia的矛盾，misaka终于被开了。刚看完了他的rip，有点幸灾乐祸，觉得misaka罪有因得。甬哥说的也有理。misaka滥用得太过度了，自己没有ipv6还撸了一大把的hax和woiden。虽然甬哥抄别人代码，自己肯定也跟着misaka滥用，但他在自己的视频里演示hysteria脚本时，也告诫大家不要在woiden上用，有一定的底线。 个人对Misaka No的评价高度概括就是:小学生，心智不成熟。 对于我来讲，他给了我一定的技术启蒙，但也因高高在上的姿态伤害了我。"},{"title":"GFW奇思妙想","date":"2022-10-28T13:54:37.000Z","url":"/2022/10/28/GFW%E5%A5%87%E6%80%9D%E5%A6%99%E6%83%B3/","tags":[["GFW","/tags/GFW/"],["灵感","/tags/%E7%81%B5%E6%84%9F/"]],"categories":[[" ",""]],"content":"true fake dns监听在53端口的udp协议，dns头部加上加密。也许不能骗过GFW，但是可能能穿越校园网&#x2F;公司内网甚至是免流？ 社工封锁如果你使用了被确定用于扶墙用途的节点将会增加本带宽的可疑性，可疑性高的带宽连接的境外ip将增加被封锁的几率。可疑性会随着时间推移而降低。可疑性到达一定等级会进行境外连接限速&#x2F;随机阻断等干扰直至白名单，使用中转等手段会继续增加，直至国内白名单。 CA攻击GFW与本国CA机构合作，为GFW签发合法的证书以攻击TLS流量。 随机对抗重放攻击搭建无tls服务器时对每个服务器生成一个随机概率：面对重放攻击，随机选择不回复、立刻断开连接、回落或发送特定数据包，将制造更多不同的特征。 x加密类似于xtls，只是在不使用tls的协议中，只加密请求头而暴露后面经tls加密后的内容。对于hysteria这种CPU占用高的协议，或许可以采用？ “不加密”某些地区可以使用vless裸连，那我们何必追求加密？只要调整协议语法、信息排列顺序就能暂时使GFW无法识别该协议。如果不想暴露自己访问的网站，可以配合tor。 全能反代应配合“不加密”。可以自建国内&#x2F;内网 dot&#x2F;doh 并将所有dns解析到自己的sni反代服务器，再设置ech。个人认为能消除TLS指纹和TLS in TLS，且中间人看到的证书始终只有一个网站。之所以要配合“不加密”是因为国内的ech&#x2F;esni被阻断了。"},{"title":"Hello World","date":"2022-10-28T13:40:00.319Z","url":"/2022/10/28/hello-world/","categories":[[" ",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]