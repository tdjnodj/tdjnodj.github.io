<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TDJNODJ&#39;s blog</title>
  
  
  <link href="https://blog.tangdaojing.ml/atom.xml" rel="self"/>
  
  <link href="https://blog.tangdaojing.ml/"/>
  <updated>2022-12-31T11:10:35.821Z</updated>
  <id>https://blog.tangdaojing.ml/</id>
  
  <author>
    <name>TDJ no dj</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次编译nekoray</title>
    <link href="https://blog.tangdaojing.ml/2022/12/31/build-nekoray/"/>
    <id>https://blog.tangdaojing.ml/2022/12/31/build-nekoray/</id>
    <published>2022-12-31T10:47:13.000Z</published>
    <updated>2022-12-31T11:10:35.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://github.com/MatsuriDayo/nekoray">nekoray</a>，一款超强科学上网客户端。</p><p>官方的构建是用macOS 10.15，我用10.14，所以每次使用都很麻烦。恰好配置好了qt环境，不如编译一个？</p><h1 id="折腾"><a href="#折腾" class="headerlink" title="折腾"></a>折腾</h1><h2 id="拉取源代码"><a href="#拉取源代码" class="headerlink" title="拉取源代码"></a>拉取源代码</h2><p>注意要带·–recursive·参数才能把依赖一起拉取。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/MatsuriDayo/nekoray.git --recursive<br></code></pre></td></tr></table></figure><p>此后的命令如无特殊说明都在<code>nekoray</code>目录下进行。我给的命令都是衔接起来的。</p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>依赖包含: CMake、Ninja、npm。</p><p>先安装个打包工具<code>appdmg</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo npm install -g appdmg<br></code></pre></td></tr></table></figure><p>再安装C语言的依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash ./libs/build_deps_all.sh<br></code></pre></td></tr></table></figure><h2 id="编译本体"><a href="#编译本体" class="headerlink" title="编译本体"></a>编译本体</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir build<br>cd build<br>cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DNKR_PACKAGE_MACOS=1 ..<br>ninja<br></code></pre></td></tr></table></figure><p>由于我没有<code>zxing</code>，所以我的第三条命令是这样的:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DNKR_PACKAGE_MACOS=1 -DNKR_NO_ZXING=1 -DNKR_NO_QUICKJS=1 ..<br></code></pre></td></tr></table></figure><h2 id="Go-部分"><a href="#Go-部分" class="headerlink" title="Go 部分"></a>Go 部分</h2><p>在<code>../</code>拉取Matsuri和v2Ray-core代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ../<br>git clone https://github.com/MatsuriDayo/Matsuri.git --recursive<br>git clone https://github.com/MatsuriDayo/v2ray-core.git --recursive<br></code></pre></td></tr></table></figure><p>编译v2Ray-core(nekoray&#x2F;go&#x2F;cmd&#x2F;nekoray_core):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd nekoray/go/cmd/nekoray_core<br>go build<br></code></pre></td></tr></table></figure><p>编译sing-box(nekoray&#x2F;go&#x2F;cmd&#x2F;nekobox_core):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ../<br>cd nekobox_core<br>go build<br></code></pre></td></tr></table></figure><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><h3 id="移动core"><a href="#移动core" class="headerlink" title="移动core"></a>移动core</h3><p>将刚刚编译得到的<code>nekoray_core</code> <code>nekobox_core</code> 放入<code>build/nekoray.app/Contents/MacOS</code></p><h3 id="拉取geo资源文件"><a href="#拉取geo资源文件" class="headerlink" title="拉取geo资源文件"></a>拉取geo资源文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ..<br>cd ..<br>cd ..<br>curl -Lso build/nekoray.app/Contents/MacOS/geoip.dat &quot;https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat&quot;<br>curl -Lso build/nekoray.app/Contents/MacOS/geosite.dat &quot;https://github.com/v2fly/domain-list-community/releases/latest/download/dlc.dat&quot;<br>curl -Lso build/nekoray.app/Contents/MacOS/geoip.db &quot;https://github.com/SagerNet/sing-geoip/releases/latest/download/geoip.db&quot;<br>curl -Lso build/nekoray.app/Contents/MacOS/geosite.db &quot;https://github.com/SagerNet/sing-geosite/releases/latest/download/geosite.db&quot;<br></code></pre></td></tr></table></figure><h3 id="正式打包"><a href="#正式打包" class="headerlink" title="正式打包"></a>正式打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">appdmg appdmg.json /path/to/nekoray.dmg<br></code></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>自此，就编译好了。</p><p>但是自编译的有点奇怪，确认、取消按钮都是英文的。但不影响使用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/MatsuriDayo/nekoray&quot;&gt;nekoray&lt;/a&gt;，一款超强科学上网客</summary>
      
    
    
    
    <category term="折腾" scheme="https://blog.tangdaojing.ml/categories/%E6%8A%98%E8%85%BE/"/>
    
    <category term="客户端" scheme="https://blog.tangdaojing.ml/categories/%E6%8A%98%E8%85%BE/%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
    
    <category term="GFW" scheme="https://blog.tangdaojing.ml/tags/GFW/"/>
    
    <category term="编译" scheme="https://blog.tangdaojing.ml/tags/%E7%BC%96%E8%AF%91/"/>
    
    <category term="折腾" scheme="https://blog.tangdaojing.ml/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>记一次在低版本macOS配置qt5</title>
    <link href="https://blog.tangdaojing.ml/2022/12/31/qt/"/>
    <id>https://blog.tangdaojing.ml/2022/12/31/qt/</id>
    <published>2022-12-31T10:36:50.000Z</published>
    <updated>2022-12-31T10:45:28.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本来想用Homebrew安装qt，但奈何系统版本太低装不了，于是我就手动配置吧。</p><h1 id="安装qt"><a href="#安装qt" class="headerlink" title="安装qt"></a>安装qt</h1><p>qt官网: <a href="https://qt.io/">https://qt.io</a></p><p>下载在线安装包，需要注册账号。然后选择自己想要安装的版本以及对应的系统版本包。</p><p>安装过程可能需要全局模式的梯子。安装器好像不会使用系统代理。</p><h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><p>编辑<code>~/.bash_profile</code>，加入以下内容:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">QTDIR</span>=/Users/admin/Qt/5.15.2/clang_64<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">LD_LIBRARY_PATH</span>=<span class="hljs-variable">$QTDIR</span>/lib:$LD_LIBRARY_PATH<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$QTDIR</span>/bin:$PATH<br></code></pre></td></tr></table></figure><p>注意: 第一行请将qt版本改成自己的。</p><p>然后输入:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">qmake -v</span><br></code></pre></td></tr></table></figure><p>检查是否成功。如果有版本号输出，那就是成功了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本来想用Homebrew安装qt，但奈何系统版本太低装不了，于是我就手动配置吧。&lt;/p&gt;
&lt;h1 id=&quot;安装qt&quot;&gt;&lt;a href=&quot;#安</summary>
      
    
    
    
    <category term="折腾" scheme="https://blog.tangdaojing.ml/categories/%E6%8A%98%E8%85%BE/"/>
    
    <category term="环境" scheme="https://blog.tangdaojing.ml/categories/%E6%8A%98%E8%85%BE/%E7%8E%AF%E5%A2%83/"/>
    
    
    <category term="编译" scheme="https://blog.tangdaojing.ml/tags/%E7%BC%96%E8%AF%91/"/>
    
    <category term="qt" scheme="https://blog.tangdaojing.ml/tags/qt/"/>
    
  </entry>
  
  <entry>
    <title>对utls的一些想法</title>
    <link href="https://blog.tangdaojing.ml/2022/12/04/invalid-utls/"/>
    <id>https://blog.tangdaojing.ml/2022/12/04/invalid-utls/</id>
    <published>2022-12-04T03:17:34.000Z</published>
    <updated>2022-12-04T03:26:35.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="……"><a href="#……" class="headerlink" title="……"></a>……</h1><p>sing-box的utls过于老旧？</p><h1 id="有图有真相"><a href="#有图有真相" class="headerlink" title="有图有真相"></a>有图有真相</h1><p>正常chrome:</p><p><img src="https://raw.githubusercontent.com/tdjnodj/picture_bed/main/blog/20221204_chrome.png" alt="chrome 108"></p><p>v2ray v5.1 trojan:</p><p><img src="https://raw.githubusercontent.com/tdjnodj/picture_bed/main/blog/20221204_nekoray_trojan.png" alt="v2ray"></p><p>sing-box utls chrome:</p><p><img src="https://raw.githubusercontent.com/tdjnodj/picture_bed/main/blog/20221204_utls_chrome.png" alt="utls chrome"></p><h1 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h1><p>首先，鹦鹉已死。</p><p>其次，我认为utls真的不是什么大问题，毕竟有很多软件、很多公司的api都是用go语言实现，还有大量使用过时浏览器内核的app、老司机软件。</p><p>所以真正的问题在于tls in tls，而不是百花齐放的tls指纹。</p><p>用这个指纹也没错，因为有的软件用的chromium内核也没及时更新。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;……&quot;&gt;&lt;a href=&quot;#……&quot; class=&quot;headerlink&quot; title=&quot;……&quot;&gt;&lt;/a&gt;……&lt;/h1&gt;&lt;p&gt;sing-box的utls过于老旧？&lt;/p&gt;
&lt;h1 id=&quot;有图有真相&quot;&gt;&lt;a href=&quot;#有图有真相&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="折腾" scheme="https://blog.tangdaojing.ml/categories/%E6%8A%98%E8%85%BE/"/>
    
    <category term="客户端" scheme="https://blog.tangdaojing.ml/categories/%E6%8A%98%E8%85%BE/%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
    
    <category term="GFW" scheme="https://blog.tangdaojing.ml/tags/GFW/"/>
    
    <category term="tls" scheme="https://blog.tangdaojing.ml/tags/tls/"/>
    
    <category term="sing-box" scheme="https://blog.tangdaojing.ml/tags/sing-box/"/>
    
  </entry>
  
  <entry>
    <title>SwitchyOmega</title>
    <link href="https://blog.tangdaojing.ml/2022/12/03/SwitchyOmega/"/>
    <id>https://blog.tangdaojing.ml/2022/12/03/SwitchyOmega/</id>
    <published>2022-12-03T06:30:17.000Z</published>
    <updated>2022-12-03T07:31:48.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>闲着没事又开始折腾了，这次就试试远古科学上网方法：SwitchyOmega!</p><h1 id="折腾"><a href="#折腾" class="headerlink" title="折腾"></a>折腾</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ul><li><p>能装插件的浏览器，且安装<a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=zh-CN">SwitchyOmega</a></p></li><li><p>有一个能在本机创建socks&#x2F;http代理的科学上网客户端</p></li><li><p>闲心</p></li></ul><h2 id="一：连接科学上网客户端"><a href="#一：连接科学上网客户端" class="headerlink" title="一：连接科学上网客户端"></a>一：连接科学上网客户端</h2><p>[因违反相关法规，相关内容不予显示]</p><h2 id="二：配置SwitchyOmega"><a href="#二：配置SwitchyOmega" class="headerlink" title="二：配置SwitchyOmega"></a>二：配置SwitchyOmega</h2><h3 id="1-创建一个自动切换模式"><a href="#1-创建一个自动切换模式" class="headerlink" title="1.创建一个自动切换模式"></a>1.创建一个自动切换模式</h3><p><img src="https://raw.githubusercontent.com/tdjnodj/picture_bed/main/blog/so_1.png" alt="自动切换模式"></p><h3 id="2-导入规则"><a href="#2-导入规则" class="headerlink" title="2.导入规则"></a>2.导入规则</h3><h4 id="GFWlist模式"><a href="#GFWlist模式" class="headerlink" title="GFWlist模式"></a>GFWlist模式</h4><p>点击“添加规则列表”</p><p><img src="https://raw.githubusercontent.com/tdjnodj/picture_bed/main/blog/so_2.png" alt="添加规则列表"></p><p>格式选择“AutoProxy”<br>网址:<br>  祖传版GFWlist:<code>https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</code><br>  新版(不兼容，不推荐): <code>https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/gfw.txt</code><br>然后更新</p><p><img src="https://raw.githubusercontent.com/tdjnodj/picture_bed/main/blog/so_3.png" alt="导入GFWlist"></p><h4 id="绕过大陆模式"><a href="#绕过大陆模式" class="headerlink" title="绕过大陆模式"></a>绕过大陆模式</h4><p>添加规则列表时，网址选择<code>https://raw.githubusercontent.com/pexcn/daily/gh-pages/pac/whitelist.pac</code></p><p>设置如下图:<br><img src="https://raw.githubusercontent.com/tdjnodj/picture_bed/main/blog/so_6.png" alt="绕过大陆"><br>对规则列表直连，添加一个条件，类型为”禁用”，并让“禁用”走代理。</p><h3 id="3-配置规则"><a href="#3-配置规则" class="headerlink" title="3.配置规则"></a>3.配置规则</h3><p>修改“规则列表规则”的“情景模式”为你想要的代理，请自行创建。默认情景模式改为直连。注意认证信息在“小锁”处填写</p><p><img src="https://raw.githubusercontent.com/tdjnodj/picture_bed/main/blog/so_4.png" alt="配置规则"></p><h3 id="4-应用更改"><a href="#4-应用更改" class="headerlink" title="4.应用更改"></a>4.应用更改</h3><p><img src="https://raw.githubusercontent.com/tdjnodj/picture_bed/main/blog/so_5.png" alt="应用更改"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在这个geoip、geosite横行的年代，不管是这种大陆白名单还是GFWlist都显得过时了，折腾一下而已。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;闲着没事又开始折腾了，这次就试试远古科学上网方法：SwitchyOmega!&lt;/p&gt;
&lt;h1 id=&quot;折腾&quot;&gt;&lt;a href=&quot;#折腾&quot; c</summary>
      
    
    
    
    <category term="折腾" scheme="https://blog.tangdaojing.ml/categories/%E6%8A%98%E8%85%BE/"/>
    
    <category term="客户端" scheme="https://blog.tangdaojing.ml/categories/%E6%8A%98%E8%85%BE/%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
    
    <category term="GFW" scheme="https://blog.tangdaojing.ml/tags/GFW/"/>
    
    <category term="porxy" scheme="https://blog.tangdaojing.ml/tags/porxy/"/>
    
    <category term="SwitchyOmega" scheme="https://blog.tangdaojing.ml/tags/SwitchyOmega/"/>
    
    <category term="浏览器插件" scheme="https://blog.tangdaojing.ml/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>v2ray: trojan + ws，支持更多客户端</title>
    <link href="https://blog.tangdaojing.ml/2022/11/27/trojanws/"/>
    <id>https://blog.tangdaojing.ml/2022/11/27/trojanws/</id>
    <published>2022-11-27T01:57:07.000Z</published>
    <updated>2022-11-27T02:13:01.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前我们讲解过如何搭建隐藏于nginx后的trojan-go，但是由于trojan-go使用的多路复用协议为smux，可能导致某些客户端不支持。那不如用v2ray搭建一个使用mux.cool协议的trojan + ws呢？同时还能享有ws 0-rtt的延迟降低！心动不如行动，赶紧跟我一起来搭建吧！</p><h1 id="折腾"><a href="#折腾" class="headerlink" title="折腾"></a>折腾</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li><p>域名以及证书</p></li><li><p>有公网端口&#x2F;ip的vps一台</p></li><li><p>基本排错能力</p></li></ul><h2 id="1-VPS环境准备"><a href="#1-VPS环境准备" class="headerlink" title="1.VPS环境准备"></a>1.VPS环境准备</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt update -y<br>apt upgrade<br>apt install  wget curl<br>apt install tmux -y #安装tmux以后台运行<br>apt install nano #安装nano文本编辑器<br>wget -N https://raw.githubusercontent.com/fscarmen/warp/main/menu.sh &amp;&amp; bash menu.sh   #安装warp<br>apt install nginx<br></code></pre></td></tr></table></figure><p>安装v2ray</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -O https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh<br>bash install-release.sh<br></code></pre></td></tr></table></figure><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h2><p>nginx:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs conf">user root; #也可以为www-date<br>worker_processes auto;<br>pid /run/nginx.pid; #不要删了<br>include /etc/nginx/modules-enabled/*.conf;<br><br>events &#123;<br>    worker_connections 1024;<br>&#125;<br><br>http &#123;<br>    sendfile on;<br>    tcp_nopush on;<br>    tcp_nodelay on;<br>    keepalive_timeout 65;<br>    types_hash_max_size 2048;<br><br>    include /etc/nginx/mime.types;<br>    default_type application/octet-stream;<br>    gzip on;<br><br>    server &#123;<br>        listen 0.0.0.0:443 ssl;  #ipv6要把&quot;0.0.0.0&quot;改为&quot;[::]&quot;<br><br>        server_name nicename.co;  #你的域名<br>        ssl_certificate       /path/cert.crt;  #证书位置<br>        ssl_certificate_key   /path/private.key; #私钥位置<br><br>        ssl_session_timeout 1d;<br>        ssl_session_cache shared:MozSSL:10m;<br>        ssl_session_tickets off;<br>        ssl_protocols    TLSv1.2 TLSv1.3; #旧版本可能不兼容新的加密方式，可以在前面加TLSv1.1<br>        ssl_prefer_server_ciphers off;<br><br>        location / &#123;<br>            proxy_pass https://bing.com; #伪装网址，注意是否有www<br>            proxy_redirect off;<br>            proxy_ssl_server_name on;<br>            sub_filter_once off;<br>            sub_filter &quot;bing.com&quot; $server_name;<br>            proxy_set_header Host &quot;bing.com&quot;; #跟伪装网址一致<br>            proxy_set_header Referer $http_referer;<br>            proxy_set_header X-Real-IP $remote_addr;<br>            proxy_set_header User-Agent $http_user_agent;<br>            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>            proxy_set_header X-Forwarded-Proto https;<br>            proxy_set_header Accept-Encoding &quot;&quot;;<br>            proxy_set_header Accept-Language &quot;zh-CN&quot;;<br>        &#125;<br><br><br>        location /ray &#123;   #分流路径，GFW喜欢扫/ray，所以千万别用/ray<br>            proxy_redirect off;<br>            proxy_pass http://127.0.0.1:10000; #v2ray端口<br>            proxy_http_version 1.1;<br>            proxy_set_header Upgrade $http_upgrade;<br>            proxy_set_header Connection &quot;upgrade&quot;;<br>            proxy_set_header Host $host;<br>            proxy_set_header X-Real-IP $remote_addr;<br>            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>        &#125;<br><br><br>    &#125;<br><br>    server &#123;<br>        listen 0.0.0.0:80; #同443端口<br>        location /.well-known/ &#123;<br>               root /var/www/html;<br>            &#125;<br>        location / &#123;<br>                rewrite ^(.*)$ https://$host$1 permanent;<br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>重头戏: v2ray</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;inbounds&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10000</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;listen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;trojan&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;clients&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>                    <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;password&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//改成你的密码</span><br>                        <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin@example.com&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;streamSettings&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ws&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;wsSettings&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/ray&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//改成你的路径</span><br>                    <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;yourhost&quot;</span> <span class="hljs-comment">//改成你的域名</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;security&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;none&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;outbounds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;freedom&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>   <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>接下来输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl reload nginx<br>systemctl restart v2ray<br>systemctl enable v2ray<br></code></pre></td></tr></table></figure><p>来启用更改。</p><p>记得关防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ufw allow 80<br>ufw allow 443<br></code></pre></td></tr></table></figure><h2 id="客户端的使用"><a href="#客户端的使用" class="headerlink" title="客户端的使用"></a>客户端的使用</h2><p>不多说。使用 <strong>原版</strong> 的 *ray时，可以在路径后面加上<code>?ed=2048</code>降低1-rtt延迟。魔改内核可能不支持。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>nginx前置不仅能更好地防御主动探测，万一被墙还能直接上CDN，实在是强大！因为我的trojan-go不知道怎么回事过不了CDN，所以这个方法好！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前我们讲解过如何搭建隐藏于nginx后的trojan-go，但是由于trojan-go使用的多路复用协议为smux，可能导致某些客户端不支</summary>
      
    
    
    
    <category term="折腾" scheme="https://blog.tangdaojing.ml/categories/%E6%8A%98%E8%85%BE/"/>
    
    <category term="搭建" scheme="https://blog.tangdaojing.ml/categories/%E6%8A%98%E8%85%BE/%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="GFW" scheme="https://blog.tangdaojing.ml/tags/GFW/"/>
    
    <category term="nginx" scheme="https://blog.tangdaojing.ml/tags/nginx/"/>
    
    <category term="trojan" scheme="https://blog.tangdaojing.ml/tags/trojan/"/>
    
    <category term="v2ray" scheme="https://blog.tangdaojing.ml/tags/v2ray/"/>
    
  </entry>
  
  <entry>
    <title>神级科学上网客户端nekoray的骚操作</title>
    <link href="https://blog.tangdaojing.ml/2022/11/26/nekosao/"/>
    <id>https://blog.tangdaojing.ml/2022/11/26/nekosao/</id>
    <published>2022-11-26T12:23:22.000Z</published>
    <updated>2022-11-26T12:38:44.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直苦于mac没有好用的科学上网GUI客户端，但终于等到它了！nekoray( <a href="https://github.com/MatsuriDayo/nekoray/">https://github.com/MatsuriDayo/nekoray/</a> )支持多平台，功能强大。</p><p>基础功能没什么好讲的，今天咱们来搞些骚操作。</p><h1 id="骚操作"><a href="#骚操作" class="headerlink" title="骚操作"></a>骚操作</h1><h2 id="套clash"><a href="#套clash" class="headerlink" title="套clash"></a>套clash</h2><p>一直以来，*ray类客户端都不能自动切换节点。这导致很多时候看视频看着看着节点挂了得手动切换，刷新一下网页还要重新看广告，很不方便。而clash不仅分流多样，还能自动切换节点，那为什么不把两者的优点结合到一起呢？</p><h3 id="搭建clash网页GUI"><a href="#搭建clash网页GUI" class="headerlink" title="搭建clash网页GUI"></a>搭建clash网页GUI</h3><p>网页GUI能让你自己选择节点。</p><h3 id="设置nekoray"><a href="#设置nekoray" class="headerlink" title="设置nekoray"></a>设置nekoray</h3><p>在自定义核心中添加clash内核。然后添加自定义内核配置。将你的clash配置文件扔进去。在nekoray GUI的地址、端口随便写。值得注意的是，要将配置中的<code>socks-port</code>或<code>mixed-port</code>改为<code>socks_port</code>。</p><p>然后就能用了。</p><h2 id="使用自定义核心"><a href="#使用自定义核心" class="headerlink" title="使用自定义核心"></a>使用自定义核心</h2><p>nekoray最大的亮点就是人性化的自定义核心配置。可以自定义配置文件后缀、帮忙分流，功能很强大。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一直苦于mac没有好用的科学上网GUI客户端，但终于等到它了！nekoray( &lt;a href=&quot;https://github.com/Ma</summary>
      
    
    
    
    <category term="折腾" scheme="https://blog.tangdaojing.ml/categories/%E6%8A%98%E8%85%BE/"/>
    
    <category term="客户端" scheme="https://blog.tangdaojing.ml/categories/%E6%8A%98%E8%85%BE/%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
    
    <category term="GFW" scheme="https://blog.tangdaojing.ml/tags/GFW/"/>
    
    <category term="折腾" scheme="https://blog.tangdaojing.ml/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="nekoray" scheme="https://blog.tangdaojing.ml/tags/nekoray/"/>
    
  </entry>
  
  <entry>
    <title>网页版clash搭建</title>
    <link href="https://blog.tangdaojing.ml/2022/11/26/web-clash/"/>
    <id>https://blog.tangdaojing.ml/2022/11/26/web-clash/</id>
    <published>2022-11-26T11:43:59.000Z</published>
    <updated>2022-11-26T12:26:25.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>clash可以说是机场的绝配了，延迟低的节点刷TG，速度快的节点看视频，解锁流媒体的节点看流媒体，分流有序，测的延迟也让人赏心悦目。</p><p>但众所周知，GUI都比较占用系统进程，对渣机不友好。那为什么不用网页UI呢？正好clash官方做了clash web UI( <a href="https://github.com/Dreamacro/clash-dashboard">https://github.com/Dreamacro/clash-dashboard</a> )，那为什么不用一用的？</p><h1 id="获得网页文件。"><a href="#获得网页文件。" class="headerlink" title="获得网页文件。"></a>获得网页文件。</h1><p>有三种获得网页的方式：1.使用<code>wget -m</code> 2.拉取编译好的网页（推荐） 3.自行编译（不做教学）</p><p>当然，不想折腾也可以用官方搭好的网页。</p><p><a href="https://clash.razord.top/">https://clash.razord.top</a></p><h2 id="下载网页"><a href="#下载网页" class="headerlink" title="下载网页"></a>下载网页</h2><h3 id="1-wget"><a href="#1-wget" class="headerlink" title="1.wget"></a>1.wget</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ wget -m https:<span class="hljs-regexp">//</span>clash.razord.top<br></code></pre></td></tr></table></figure><h3 id="2-拉取编译好的网页"><a href="#2-拉取编译好的网页" class="headerlink" title="2.拉取编译好的网页"></a>2.拉取编译好的网页</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone -b gh-pages https://github.com/Dreamacro/clash-dashboard.git<br></code></pre></td></tr></table></figure><h1 id="部署网页"><a href="#部署网页" class="headerlink" title="部署网页"></a>部署网页</h1><h2 id="部署到cloudflare-page"><a href="#部署到cloudflare-page" class="headerlink" title="部署到cloudflare page"></a>部署到cloudflare page</h2><h3 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h3><h4 id="1-fork官方项目"><a href="#1-fork官方项目" class="headerlink" title="1.fork官方项目"></a>1.fork官方项目</h4><p>你得先有个github账号和cloudflare账号</p><p><a href="https://github.com/Dreamacro/clash-dashboard">https://github.com/Dreamacro/clash-dashboard</a></p><p><img src="https://raw.githubusercontent.com/tdjnodj/picture_bed/main/blog/webclash_1_fork.png" alt="alt picture"></p><h4 id="2-部署"><a href="#2-部署" class="headerlink" title="2.部署"></a>2.部署</h4><p>打开 <a href="https://dash.cloudflare.com/">https://dash.cloudflare.com</a> ，选择”Page”，创建一个新项目，选择连接到git</p><p><img src="https://raw.githubusercontent.com/tdjnodj/picture_bed/main/blog/webclash_2_gitpage.png" alt="alt picture"></p><p>如果没有绑定github账号，这一步会要求你绑定，</p><p>绑定完后选择刚刚fork的储存库，然后开始设置。</p><p><img src="https://raw.githubusercontent.com/tdjnodj/picture_bed/main/blog/webclash_3_choosepage.png" alt="alt picture"></p><p>将项目名称修改为自己心仪的，并将生产分支改为 <strong>gh-pages</strong>。</p><p><img src="https://raw.githubusercontent.com/tdjnodj/picture_bed/main/blog/webclash_4_choosepage2.png" alt="alt picture"></p><p>耐心等待部署完成，就可以访问了。为了防止page.dev域名被阻断，可以给它添加自定义域名。</p><h3 id="手动上传网页"><a href="#手动上传网页" class="headerlink" title="手动上传网页"></a>手动上传网页</h3><p>在cloudflare page中选手动上传。</p><p><img src="https://raw.githubusercontent.com/tdjnodj/picture_bed/main/blog/webclash_5_directupload.png" alt="alt picture"></p><p>然后把下载好的网页上传上去。</p><h2 id="部署到网页服务器。"><a href="#部署到网页服务器。" class="headerlink" title="部署到网页服务器。"></a>部署到网页服务器。</h2><p>不详细教学。</p><p>nginx:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs conf">location / &#123;<br>    root /data/www; #改为的文件夹路径<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="部署到本机"><a href="#部署到本机" class="headerlink" title="部署到本机"></a>部署到本机</h2><h3 id="macos"><a href="#macos" class="headerlink" title="macos"></a>macos</h3><h4 id="启用macOS自带的apache2"><a href="#启用macOS自带的apache2" class="headerlink" title="启用macOS自带的apache2"></a>启用macOS自带的apache2</h4><p>参考: <a href="https://www.jianshu.com/p/a95c9893b683">https://www.jianshu.com/p/a95c9893b683</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> sudo apachectl <span class="hljs-built_in">start</span><br></code></pre></td></tr></table></figure><p>然后访问 <a href="http://localhost/">http://localhost</a> 验证是否已启用</p><h4 id="部署网页-1"><a href="#部署网页-1" class="headerlink" title="部署网页"></a>部署网页</h4><p>把文件夹<code>clash-dashboard</code>内的内容移动到<code>/Library/WebServer/Documents</code></p><p>之后，直接访问localhost就能使用了！</p><h4 id="添加SSL证书"><a href="#添加SSL证书" class="headerlink" title="添加SSL证书"></a>添加SSL证书</h4><p>由于我的localhost部署了太多服务，每次在浏览器输入<code>localhost</code>时都会联想出别的端口，为了方便，我把某个可怜的网页的host改为了127.0.0.1，为了正式一点，再给它发个证书吧！</p><h5 id="自签证书"><a href="#自签证书" class="headerlink" title="自签证书"></a>自签证书</h5><p>不做教学</p><h4 id="为apache2安装证书"><a href="#为apache2安装证书" class="headerlink" title="为apache2安装证书"></a>为apache2安装证书</h4><p>参考:</p><p><a href="https://help.aliyun.com/document_detail/98727.html">https://help.aliyun.com/document_detail/98727.html</a></p><p><a href="https://www.jianshu.com/p/dc97dfd4bf63">https://www.jianshu.com/p/dc97dfd4bf63</a></p><p>将证书和私钥放在<code>/etc/apache2</code>并重命名为<code>server.crt</code>和<code>server.key</code></p><p>修改’&#x2F;etc&#x2F;apache2&#x2F;httpd.conf’，注意要有root权限</p><p>找到 #LoadModule ssl_module modules&#x2F;mod_ssl.so和#Include conf&#x2F;extra&#x2F;httpd-ssl.conf，去掉前面的#号注释</p><p>并在最后加上以下内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs conf">&lt;VirtualHost *:443&gt;<br>ServerName clash.org # 改成想要劫持的域名<br>&lt;/VirtualHost&gt;<br></code></pre></td></tr></table></figure><p>把证书添加到信任列表中，然后尝试吧！</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./clash -f config.yaml<br></code></pre></td></tr></table></figure><p>但开着个终端也不方便，可以用tmux:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">tmux<br>./clash -f config.yaml<br>^b # ctrl+b退出<br></code></pre></td></tr></table></figure><h1 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h1><p>1.容易忘记关内核。</p><p>2.更新订阅不容易、容易忘。好在我用的机场千年不换域名，没影响。</p><p>3.更新ip数据库不及时。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;clash可以说是机场的绝配了，延迟低的节点刷TG，速度快的节点看视频，解锁流媒体的节点看流媒体，分流有序，测的延迟也让人赏心悦目。&lt;/p&gt;</summary>
      
    
    
    
    <category term="折腾" scheme="https://blog.tangdaojing.ml/categories/%E6%8A%98%E8%85%BE/"/>
    
    <category term="搭建" scheme="https://blog.tangdaojing.ml/categories/%E6%8A%98%E8%85%BE/%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="GFW" scheme="https://blog.tangdaojing.ml/tags/GFW/"/>
    
    <category term="clash" scheme="https://blog.tangdaojing.ml/tags/clash/"/>
    
    <category term="web" scheme="https://blog.tangdaojing.ml/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>节点提升伪装性思路</title>
    <link href="https://blog.tangdaojing.ml/2022/11/02/node-like-a-parrot/"/>
    <id>https://blog.tangdaojing.ml/2022/11/02/node-like-a-parrot/</id>
    <published>2022-11-02T13:35:49.000Z</published>
    <updated>2022-11-19T07:19:37.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决DNS嫌疑"><a href="#解决DNS嫌疑" class="headerlink" title="解决DNS嫌疑"></a>解决DNS嫌疑</h1><p>某些时候，由于错误的配置，大量的DNS请求会通过代理发送。在GFW的视角看起来就很可疑了，所以如果是常用web服务器前置的话，可以通过以下措施减轻嫌疑：</p><h4 id="反代DOH"><a href="#反代DOH" class="headerlink" title="反代DOH"></a>反代DOH</h4><p>以nginx为例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs conf">location /dns-query &#123;<br>    proxy_pass https://cloudflare-dns.com;<br>    proxy_redirect off;<br>    proxy_ssl_server_name on;<br>    sub_filter_once off;<br>    sub_filter &quot;cloudflare-dns.com&quot; $server_name;<br>    proxy_set_header Host &quot;cloudflare-dns.com&quot;;<br>    proxy_set_header Referer $http_referer;<br>    proxy_set_header X-Real-IP $remote_addr;<br>    proxy_set_header User-Agent $http_user_agent;<br>    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>    proxy_set_header X-Forwarded-Proto https;<br>    proxy_set_header Accept-Encoding &quot;&quot;;<br>    proxy_set_header Accept-Language &quot;zh-CN&quot;;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样在自己的服务器上建立了一个DOH服务。</p><p>但是，谁知道你有个DOH服务？</p><p>如果是自建网页的话，可以在网页里写上欢迎使用本站DOH之类的话，</p><p>如果是反代网站，可以在朋友间小范围传播这个DOH。这样还能增加访问量，减少可疑性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解决DNS嫌疑&quot;&gt;&lt;a href=&quot;#解决DNS嫌疑&quot; class=&quot;headerlink&quot; title=&quot;解决DNS嫌疑&quot;&gt;&lt;/a&gt;解决DNS嫌疑&lt;/h1&gt;&lt;p&gt;某些时候，由于错误的配置，大量的DNS请求会通过代理发送。在GFW的视角看起来就很可疑了，所以如果是</summary>
      
    
    
    
    <category term="灵感记录" scheme="https://blog.tangdaojing.ml/categories/%E7%81%B5%E6%84%9F%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="GFW" scheme="https://blog.tangdaojing.ml/tags/GFW/"/>
    
    <category term="灵感" scheme="https://blog.tangdaojing.ml/tags/%E7%81%B5%E6%84%9F/"/>
    
    <category term="伪装" scheme="https://blog.tangdaojing.ml/tags/%E4%BC%AA%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>小naive:trojan-go后置 + 客户端隐藏指纹，消除TLS指纹问题 + 缓解tls in tls特征！我愿称之为naiveproxy的另一种实现！</title>
    <link href="https://blog.tangdaojing.ml/2022/11/02/trojango/"/>
    <id>https://blog.tangdaojing.ml/2022/11/02/trojango/</id>
    <published>2022-11-02T13:21:31.000Z</published>
    <updated>2022-11-26T12:26:06.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>虽然naiveproxy能消除指纹问题，但真的太慢了。有没有既要当__又要__的方法呢？那就使用GFW report修改后的trojan-go来实现吧！</p><h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>一键安装必要环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">pt update -y<br>apt upgrade<br>apt install  wget curl<br>apt install tmux -y #安装tmux以后台运行<br>apt install nano #安装nano文本编辑器<br>wget -N https://raw.githubusercontent.com/fscarmen/warp/main/menu.sh &amp;&amp; bash menu.sh [option] [lisence]  #安装warp<br></code></pre></td></tr></table></figure><h4 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h4><p>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs json">user www-date;<br>worker_processes auto;<br>pid /run/nginx.pid; #不要删了<br>include /etc/nginx/modules-enabled<span class="hljs-comment">/*.conf;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">events &#123;</span><br><span class="hljs-comment">    worker_connections 1024;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">http &#123;</span><br><span class="hljs-comment">    sendfile on;</span><br><span class="hljs-comment">    tcp_nopush on;</span><br><span class="hljs-comment">    tcp_nodelay on;</span><br><span class="hljs-comment">    keepalive_timeout 65;</span><br><span class="hljs-comment">    types_hash_max_size 2048;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    include /etc/nginx/mime.types;</span><br><span class="hljs-comment">    default_type application/octet-stream;</span><br><span class="hljs-comment">    gzip on;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    server &#123;</span><br><span class="hljs-comment">        listen 0.0.0.0:443 ssl;  #ipv6要把&quot;0.0.0.0&quot;改为&quot;[::]&quot;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        server_name nicename.co;  #你的域名</span><br><span class="hljs-comment">        ssl_certificate       /path/cert.crt;  #证书位置</span><br><span class="hljs-comment">        ssl_certificate_key   /path/private.key; #私钥位置</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        ssl_session_timeout 1d;</span><br><span class="hljs-comment">        ssl_session_cache shared:MozSSL:10m;</span><br><span class="hljs-comment">        ssl_session_tickets off;</span><br><span class="hljs-comment">        ssl_protocols    TLSv1.2 TLSv1.3; #旧版本可能不兼容新的加密方式，可以在前面加TLSv1.1</span><br><span class="hljs-comment">        ssl_prefer_server_ciphers off;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        location / &#123;</span><br><span class="hljs-comment">            proxy_pass https://bing.com; #伪装网址，注意是否有www</span><br><span class="hljs-comment">            proxy_redirect off;</span><br><span class="hljs-comment">            proxy_ssl_server_name on;</span><br><span class="hljs-comment">            sub_filter_once off;</span><br><span class="hljs-comment">            sub_filter &quot;bing.com&quot; $server_name;</span><br><span class="hljs-comment">            proxy_set_header Host &quot;bing.com&quot;; #跟伪装网址一致</span><br><span class="hljs-comment">            proxy_set_header Referer $http_referer;</span><br><span class="hljs-comment">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="hljs-comment">            proxy_set_header User-Agent $http_user_agent;</span><br><span class="hljs-comment">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="hljs-comment">            proxy_set_header X-Forwarded-Proto https;</span><br><span class="hljs-comment">            proxy_set_header Accept-Encoding &quot;&quot;;</span><br><span class="hljs-comment">            proxy_set_header Accept-Language &quot;zh-CN&quot;;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        location /trojan&#123;   #trojan路径</span><br><span class="hljs-comment">            proxy_redirect off;</span><br><span class="hljs-comment">            proxy_pass http://127.0.0.1:10000; #trojan端口</span><br><span class="hljs-comment">            proxy_http_version 1.1;</span><br><span class="hljs-comment">            proxy_set_header Upgrade $http_upgrade;</span><br><span class="hljs-comment">            proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="hljs-comment">            proxy_set_header Host $host;</span><br><span class="hljs-comment">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="hljs-comment">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    server &#123;</span><br><span class="hljs-comment">        listen 0.0.0.0:80; #同443端口</span><br><span class="hljs-comment">        location /.well-known/ &#123;</span><br><span class="hljs-comment">               root /var/www/html;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        location / &#123;</span><br><span class="hljs-comment">                rewrite ^(.*)$ https://$host$1 permanent;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><p>接着重启nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl reload nginx<br></code></pre></td></tr></table></figure><h4 id="配置trojan-go"><a href="#配置trojan-go" class="headerlink" title="配置trojan-go"></a>配置trojan-go</h4><p><a href="https://github.com/p4gefau1t/trojan-go">https://github.com/p4gefau1t/trojan-go</a><br>先创建一个文件夹，再下载trojan-go(自行替换为对应版本):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir trojan-go/<br>wget https://github.com/p4gefau1t/trojan-go/releases/download/v0.10.6/trojan-go-linux-amd64.zip<br>unzip trojan-go-linux-amd64.zip<br>rm trojan-go-linux-amd64.zip<br></code></pre></td></tr></table></figure><p>创建一个配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">nano config.json<br><br></code></pre></td></tr></table></figure><p>填入:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;run_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;server&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;local_addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;local_port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10000</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;remote_addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;remote_port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">80</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;example&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mux&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;concurrency&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;idle_timeout&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">60</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;websocket&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/trojan&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nicename.co&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;transport_plugin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;plaintext&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>启动:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tmux<br>./trojan-go<br></code></pre></td></tr></table></figure><h1 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h1><p>请使用带有指纹混淆的GFW report版<br><a href="https://github.com/gfw-report/trojan-go/releases">https://github.com/gfw-report/trojan-go/releases</a><br>配置文件:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;run_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;client&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;local_addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;local_port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1080</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;remote_addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nicename.co&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;remote_port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">443</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;example&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ssl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;sni&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nicename.co&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;fingerprint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;chrome&quot;</span> # 改为你想要伪装的指纹<br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mux&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;concurrency&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;idle_timeout&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">60</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;websocket&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/trojan&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nicename.co&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./trojan-go<br></code></pre></td></tr></table></figure><p>即可运行</p><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><h4 id="缓解tls-in-tls"><a href="#缓解tls-in-tls" class="headerlink" title="缓解tls in tls"></a>缓解tls in tls</h4><p>将多路复用数尽可能设置大，如需无限复用，请在两端将<code>concurrency</code>设为<code>&#39;-1&#39;</code></p><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><p>1.为什么不在nginx里配合v2ray使用？</p><p>答：v2ray没有指纹伪造，失去了本教程的目的。</p><p>2.为什么过不了CDN</p><p>答：目前据我观察推测是trojan-go的ws实现有问题，无法解决。</p><p>3.为什么还是被墙了</p><p>答：首先本组合没有消除TLS in TLS特征，其次可能是你的流量过大，或是用了被重点监控的ip</p><h1 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h1><p><a href="https://github.com/gfw-report/trojan-go" title="GFW report提供的trojan-go">GFW report提供的trojan-go</a><br><a href="https://guide.v2fly.org/advanced/tls_routing_with_nginx.html#trojan-go" title="v2fly教程中的TLS分流">v2fly教程中的TLS分流</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;虽然naiveproxy能消除指纹问题，但真的太慢了。有没有既要当__又要__的方法呢？那就使用GFW report修改后的trojan-g</summary>
      
    
    
    
    <category term="折腾" scheme="https://blog.tangdaojing.ml/categories/%E6%8A%98%E8%85%BE/"/>
    
    <category term="搭建" scheme="https://blog.tangdaojing.ml/categories/%E6%8A%98%E8%85%BE/%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="GFW" scheme="https://blog.tangdaojing.ml/tags/GFW/"/>
    
    <category term="nginx" scheme="https://blog.tangdaojing.ml/tags/nginx/"/>
    
    <category term="trojan" scheme="https://blog.tangdaojing.ml/tags/trojan/"/>
    
    <category term="naiveproxy" scheme="https://blog.tangdaojing.ml/tags/naiveproxy/"/>
    
  </entry>
  
  <entry>
    <title>论翻墙界的黑历史</title>
    <link href="https://blog.tangdaojing.ml/2022/10/29/fq-black-history/"/>
    <id>https://blog.tangdaojing.ml/2022/10/29/fq-black-history/</id>
    <published>2022-10-29T13:18:40.000Z</published>
    <updated>2022-11-19T07:19:08.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>翻墙界看似是个自由软件遍地的良好生态，可实际上大部分开发者都一言难尽<br>本文来盘点一些翻墙界的黑历史。</p><h1 id="history-hysteria"><a href="#history-hysteria" class="headerlink" title="history hysteria!"></a><del>history</del> hysteria!</h1><h3 id="shadowsocksR"><a href="#shadowsocksR" class="headerlink" title="shadowsocksR"></a>shadowsocksR</h3><p>breakwa11魔改了shadowsocksR，但并没有遵守GPL。</p><p>网民们动用了墙外最有效的武器：开盒，开到退网。</p><p>科学界多了一个优良传统：一言不合就开盒。</p><h3 id="Ray之争"><a href="#Ray之争" class="headerlink" title="*Ray之争"></a>*Ray之争</h3><p>RPRX发明的xtls协议因沟通问题与v2ray分家，自立xray。同时RPRX的语气偏于自大，导致很多人不喜欢。</p><p>分就分，但支持哪一派的人都有不理智的粉丝，双方互喷，战火也蔓延到GUI客户端，最后导致Qv2ray停更，对其他GUI也有一定影响。</p><p>现在选择哪边成了政治站队，无关实际，跟饭圈一样。</p><p>争斗还没结束，<a href="https://www.v2fly.org/v5/config/proxy/vless.html">v2fly文档</a>中提出要废除vless并用trojan替代。现在绝大多数trojan都是暴露在前端的，如何面对服务端指纹问题？xtls许可证不同踢掉就算了，那RPRX做的vless也要政治式得否决掉，强。</p><h3 id="脚本作者也好不到哪里去"><a href="#脚本作者也好不到哪里去" class="headerlink" title="脚本作者也好不到哪里去"></a>脚本作者也好不到哪里去</h3><p>优良模范：teddysun、233boy和hijk</p><p>遵守开源许可，态度温和，脚本全能。</p><p>新时代作者：Misaka No &amp; 甬哥侃侃侃</p><p>抄袭代码、简单修改，为了自身利益撕逼、饭圈化。</p><h1 id="感叹"><a href="#感叹" class="headerlink" title="感叹"></a>感叹</h1><p>做的人为了利益乱搞滥改，用的人一脸茫然或被卷入争斗，牛的人不想开源自己使用，GFW坐收渔翁之利。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;翻墙界看似是个自由软件遍地的良好生态，可实际上大部分开发者都一言难尽&lt;br&gt;本文来盘点一些翻墙界的黑历史。&lt;/p&gt;
&lt;h1 id=&quot;hist</summary>
      
    
    
    
    <category term="八卦吃瓜" scheme="https://blog.tangdaojing.ml/categories/%E5%85%AB%E5%8D%A6%E5%90%83%E7%93%9C/"/>
    
    
    <category term="科学上网" scheme="https://blog.tangdaojing.ml/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    <category term="黑历史" scheme="https://blog.tangdaojing.ml/tags/%E9%BB%91%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>回忆Misaka No(钟致远)</title>
    <link href="https://blog.tangdaojing.ml/2022/10/29/remeber-misakano/"/>
    <id>https://blog.tangdaojing.ml/2022/10/29/remeber-misakano/</id>
    <published>2022-10-29T00:41:38.000Z</published>
    <updated>2022-11-19T07:20:17.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近Misaka No 被开盒而退网，想起来还是挺唏嘘的。本文以“我”的视角回忆一下他，带有强烈的主观色彩，不喜勿看。</p><h1 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h1><h3 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h3><p>当时我还不会自己搭建扶墙节点，想学但苦于没有vps。在搜寻资源的时候发现了善于白嫖的他。并且按照他第一代博客( <a href="https://owo.misaka.rest/">https://owo.misaka.rest</a> ) 的教程，搞到了hax的vps。之后我用了他的x-ui、warp、xray脚本等工具，觉得他是个无所不能的大佬，立即拜倒。</p><h3 id="小有改变"><a href="#小有改变" class="headerlink" title="小有改变"></a>小有改变</h3><p>后来仔细看了他的github项目，发现这些东西都是改编自别人，我觉得有点失望，于是又找到各项目的原作，用回原作了。</p><h3 id="再度崇拜"><a href="#再度崇拜" class="headerlink" title="再度崇拜"></a>再度崇拜</h3><p>后来看他发了很多白嫖教程，我也跟着他白嫖了很多资源。白嫖的感觉非同一般的爽。又发现上游网络跳跃跑路了，觉得他尽到了开源使用者的义务——继续维护停更了的项目。xray支持shadowsocks-2022后，他也在x-ui里及时增加。</p><h3 id="又觉得不对劲"><a href="#又觉得不对劲" class="headerlink" title="又觉得不对劲"></a>又觉得不对劲</h3><p>后来发现这些白嫖的资源质量都很低，ip也因嫖的人过多而很脏。而且自己几百年都不一定用一次。我开始怀疑：嫖来这堆垃圾，自己没用，还占用了别人需要的资源，真的好吗？</p><p>又找到了<a href="https://github.com/FranzKafkaYu/x-ui">FranzKafkaYu维护的x-ui</a>，发现misaka版的x-ui引以为傲的功能包括ss-2022都是FranzKafkaYu完成的。这时misaka在我眼里成了一个fork别人项目、把配置改成自己喜欢的、再做成全家桶的360式流氓。</p><h3 id="惋惜"><a href="#惋惜" class="headerlink" title="惋惜"></a>惋惜</h3><p>过了一段时间，发现misaka关网站了，TG群也禁言。看里面提到“怕影响自身前途”，我还以为他是喝茶去了。不禁感到惋惜：虽然都是抄的，但给了小白很多指引。</p><h3 id="找到小号"><a href="#找到小号" class="headerlink" title="找到小号"></a>找到小号</h3><p>一段时间后，我发现了一个疑似他小号的账户（后来也证实确实是他）—— <a href="https://github.com/taffychan">taffychan</a>。我发现他新做了naiveproxy的脚本，虽然不太完善，但可以用。这总是他原创的了吧。看到他没死，还做了新作品，我觉得他会积极发展了。</p><h3 id="重出江湖"><a href="#重出江湖" class="headerlink" title="重出江湖"></a>重出江湖</h3><p>又过了一段时间，Misaka终于憋不住，重新开启了博客( <a href="https://blog.misaka.rest/">https://blog.misaka.rest</a> )。这时我觉得他有点恶心了:又不恢复之前所有的文章，就出几篇几个意思？炒冷饭吗？</p><p>再看他Gitlab上的x-ui:闭源了？赤裸裸地违反开源许可！原作可是高贵的<a href="https://github.com/vaxilu/x-ui/blob/main/LICENSE">GNU-3.0</a>许可证，你就因为代码被抄袭了就闭源？而且看到他每个脚本的界面上都大大地写着是他做的，原本网络跳跃的脚本里，原作竟然改成了他Misaka No？我立刻觉得他太不要脸了。</p><h3 id="装高冷"><a href="#装高冷" class="headerlink" title="装高冷"></a>装高冷</h3><p>他在修改他的naiveproxy脚本时，我拿过去完善了一下，但还是有点问题（他新改的连运行都不行），我去找他发问，他会都不回。有疑问在他群里问，他也不理我。几天后他完善了新的naive脚本，我就怀疑他抄了我修改的部分，当然也只是怀疑。但他既然成功完善了脚本，应该能回答我的问题，但他就是没回答，不像贴心的<a href="https://github.com/arm64v8a">@armeabi-v7a</a>尽力解答issue。这行为让我很气。</p><h3 id="被开盒"><a href="#被开盒" class="headerlink" title="被开盒"></a>被开盒</h3><p>最后由于和coia的矛盾，misaka终于被开了。刚看完了他的<a href="https://rip.wiki/">rip</a>，有点幸灾乐祸，觉得misaka罪有因得。甬哥<a href="https://ygkkk.blogspot.com/2022/10/blog-post.html">说的</a>也有理。misaka滥用得太过度了，自己没有ipv6还撸了一大把的hax和woiden。虽然甬哥抄别人代码，自己肯定也跟着misaka滥用，但他在自己的<a href="https://www.youtube.com/watch?v=6fbxOhRnXDc&t">视频</a>里演示hysteria脚本时，也告诫大家不要在woiden上用，有一定的底线。</p><h1 id="个人对Misaka-No的评价"><a href="#个人对Misaka-No的评价" class="headerlink" title="个人对Misaka No的评价"></a>个人对Misaka No的评价</h1><p>高度概括就是:小学生，心智不成熟。</p><p>对于我来讲，他给了我一定的技术启蒙。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近Misaka No 被开盒而退网，想起来还是挺唏嘘的。本文以“我”的视角回忆一下他，带有强烈的主观色彩，不喜勿看。&lt;/p&gt;
&lt;h1 id</summary>
      
    
    
    
    <category term="八卦吃瓜" scheme="https://blog.tangdaojing.ml/categories/%E5%85%AB%E5%8D%A6%E5%90%83%E7%93%9C/"/>
    
    
    <category term="misaka" scheme="https://blog.tangdaojing.ml/tags/misaka/"/>
    
    <category term="回忆" scheme="https://blog.tangdaojing.ml/tags/%E5%9B%9E%E5%BF%86/"/>
    
  </entry>
  
  <entry>
    <title>GFW奇思妙想</title>
    <link href="https://blog.tangdaojing.ml/2022/10/28/gfw-idea/"/>
    <id>https://blog.tangdaojing.ml/2022/10/28/gfw-idea/</id>
    <published>2022-10-28T13:54:37.000Z</published>
    <updated>2022-11-19T07:20:03.414Z</updated>
    
    <content type="html"><![CDATA[<h1 id="true-fake-dns"><a href="#true-fake-dns" class="headerlink" title="true fake dns"></a>true fake dns</h1><p>监听在53端口的udp协议，dns头部加上加密。也许不能骗过GFW，但是可能能穿越校园网&#x2F;公司内网甚至是免流？</p><h1 id="社工封锁"><a href="#社工封锁" class="headerlink" title="社工封锁"></a>社工封锁</h1><p>如果你使用了被确定用于扶墙用途的节点将会增加本带宽的可疑性，可疑性高的带宽连接的境外ip将增加被封锁的几率。<br>可疑性会随着时间推移而降低。<br>可疑性到达一定等级会进行境外连接限速&#x2F;随机阻断等干扰直至白名单，使用中转等手段会继续增加，直至国内白名单。</p><h1 id="CA攻击"><a href="#CA攻击" class="headerlink" title="CA攻击"></a>CA攻击</h1><p>GFW与本国CA机构合作，为GFW签发合法的证书以攻击TLS流量。</p><h1 id="随机对抗重放攻击"><a href="#随机对抗重放攻击" class="headerlink" title="随机对抗重放攻击"></a>随机对抗重放攻击</h1><p>搭建无tls服务器时对每个服务器生成一个随机概率：面对重放攻击，随机选择不回复、立刻断开连接、回落或发送特定数据包，将制造更多不同的特征。</p><h1 id="x加密"><a href="#x加密" class="headerlink" title="x加密"></a>x加密</h1><p>类似于xtls，只是在不使用tls的协议中，只加密请求头而暴露后面经tls加密后的内容。<br>对于hysteria这种CPU占用高的协议，或许可以采用？</p><h1 id="“不加密”"><a href="#“不加密”" class="headerlink" title="“不加密”"></a>“不加密”</h1><p>某些地区可以使用vless裸连，那我们何必追求加密？只要调整协议语法、信息排列顺序就能暂时使GFW无法识别该协议。<br>如果不想暴露自己访问的网站，可以配合tor。</p><h1 id="全能反代"><a href="#全能反代" class="headerlink" title="全能反代"></a>全能反代</h1><p>应配合“不加密”。<br>可以自建国内&#x2F;内网 dot&#x2F;doh 并将所有dns解析到自己的sni反代服务器，再设置ech。<br>个人认为能消除TLS指纹和TLS in TLS，且中间人看到的证书始终只有一个网站。之所以要配合“不加密”是因为国内的ech&#x2F;esni被阻断了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;true-fake-dns&quot;&gt;&lt;a href=&quot;#true-fake-dns&quot; class=&quot;headerlink&quot; title=&quot;true fake dns&quot;&gt;&lt;/a&gt;true fake dns&lt;/h1&gt;&lt;p&gt;监听在53端口的udp协议，dns头部加上加密。也许</summary>
      
    
    
    
    <category term="灵感记录" scheme="https://blog.tangdaojing.ml/categories/%E7%81%B5%E6%84%9F%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="GFW" scheme="https://blog.tangdaojing.ml/tags/GFW/"/>
    
    <category term="灵感" scheme="https://blog.tangdaojing.ml/tags/%E7%81%B5%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.tangdaojing.ml/2022/10/28/hello-world/"/>
    <id>https://blog.tangdaojing.ml/2022/10/28/hello-world/</id>
    <published>2022-10-28T13:40:00.319Z</published>
    <updated>2022-11-19T07:18:41.547Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="本站相关" scheme="https://blog.tangdaojing.ml/categories/%E6%9C%AC%E7%AB%99%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
</feed>
